version: 2.1

commands:
  conditional_deploy_check:
    description: "Check if deployment should proceed"
    steps:
      - run:
          name: Check deployment conditions
          command: |
            if [ "$CIRCLE_BRANCH" != "main" ]; then
              echo "Not on main branch, skipping deployment"
              circleci step halt
            fi

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.11
      - image: cimg/postgres:14.1
        environment:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker
      
      # Install dockerize for waiting
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      
      # Wait for database
      - run:
          name: Wait for database
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
      
      # Install dependencies and run tests
      - run:
          name: Install dependencies
          command: |
            python -m pip install --upgrade pip
            pip install -r src/requirements.txt
            pip install pytest pytest-cov
      
      # Run database migrations
      - run:
          name: Run database migrations
          command: |
            export DATABASE_URL="postgresql://testuser:testpass@localhost:5432/testdb"
            cd src && python app.py migrate
      
      # Run tests
      - run:
          name: Run tests
          command: |
            export DATABASE_URL="postgresql://testuser:testpass@localhost:5432/testdb"
            mkdir -p test-results
            python -m pytest test_app_working.py --junitxml=test-results/junit.xml
      
      # Store test results
      - store_test_results:
          path: test-results
      
      # Build Docker image
      - run:
          name: Build Docker image
          command: |
            docker build -t my-app:$CIRCLE_SHA1 .
            docker tag my-app:$CIRCLE_SHA1 my-app:latest
      
      # Save Docker image for downstream jobs
      - run:
          name: Save Docker image
          command: |
            docker save my-app:$CIRCLE_SHA1 > docker-image.tar
      
      - persist_to_workspace:
          root: .
          paths:
            - docker-image.tar
            - scripts/

  integration-test:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: .
      
      - setup_remote_docker
      
      # Load Docker image
      - run:
          name: Load Docker image
          command: |
            docker load < docker-image.tar
      
      # Run integration tests
      - run:
          name: Run integration tests
          command: |
            chmod +x scripts/test.sh
            ./scripts/test.sh integration

  deploy:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: .
      
      - conditional_deploy_check
      
      - setup_remote_docker
      
      # Load Docker image
      - run:
          name: Load Docker image
          command: |
            docker load < docker-image.tar
      
      # Install Heroku CLI
      - run:
          name: Install Heroku CLI
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh
      
      # Deploy to Heroku
      - run:
          name: Deploy to Heroku
          command: |
            # Set container stack
            heroku stack:set container -a $HEROKU_APP_NAME
            
            # Login to Heroku Container Registry
            echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com
            
            # Tag image for Heroku Container Registry
            docker tag my-app:$CIRCLE_SHA1 registry.heroku.com/$HEROKU_APP_NAME/web
            
            # Push to Heroku Container Registry
            docker push registry.heroku.com/$HEROKU_APP_NAME/web
            
            # Release the image
            heroku container:release web -a $HEROKU_APP_NAME

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: /.*/
      
      - integration-test:
          requires:
            - build-and-test
          filters:
            branches:
              only: /.*/
      
      - deploy:
          requires:
            - integration-test
          filters:
            branches:
              only: main